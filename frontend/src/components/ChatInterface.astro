---
// Chat Interface Component for GremlinGPT
// This component provides the NLP Engine and Chat functionality in the frontend
---

<div class="h-full bg-gray-900 text-gray-100 flex flex-col">
  <!-- Chat Header -->
  <div class="bg-gray-800 p-4 border-b border-gray-700">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
        <h2 class="text-lg font-semibold">ðŸ§  GremlinGPT Chat Interface</h2>
      </div>
      <div class="flex items-center space-x-2">
        <button id="clear-chat" class="px-3 py-1 text-sm bg-gray-700 hover:bg-gray-600 rounded">
          Clear Chat
        </button>
        <div id="chat-status" class="text-sm text-gray-400">Ready</div>
      </div>
    </div>
  </div>

  <!-- Chat Messages Area -->
  <div id="chat-messages" class="flex-1 overflow-auto p-4 space-y-4">
    <div class="text-center text-gray-500 text-sm">
      Welcome to GremlinGPT! Start a conversation below.
    </div>
  </div>

  <!-- Chat Input Area -->
  <div class="bg-gray-800 p-4 border-t border-gray-700">
    <div class="flex space-x-2">
      <input 
        id="chat-input" 
        type="text" 
        placeholder="Type your message to GremlinGPT..."
        class="flex-1 bg-gray-700 text-gray-100 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button 
        id="send-chat" 
        class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Send
      </button>
    </div>
    <div class="mt-2 text-xs text-gray-500">
      Press Enter to send â€¢ Connected to NLP Engine
    </div>
  </div>
</div>

<script>
class GremlinChat {
  constructor() {
    this.messages = [];
    this.sessionId = this.generateSessionId();
    this.initializeElements();
    this.setupEventListeners();
    this.checkBackendConnection();
  }

  generateSessionId() {
    return 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  initializeElements() {
    this.chatMessages = document.getElementById('chat-messages');
    this.chatInput = document.getElementById('chat-input');
    this.sendButton = document.getElementById('send-chat');
    this.clearButton = document.getElementById('clear-chat');
    this.statusDiv = document.getElementById('chat-status');
  }

  setupEventListeners() {
    this.sendButton.addEventListener('click', () => this.sendMessage());
    this.clearButton.addEventListener('click', () => this.clearChat());
    
    this.chatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });
  }

  async checkBackendConnection() {
    try {
      const response = await fetch('/api/health');
      if (response.ok) {
        this.updateStatus('Connected', 'text-green-400');
      } else {
        this.updateStatus('Backend Offline', 'text-red-400');
      }
    } catch (error) {
      this.updateStatus('Connection Error', 'text-red-400');
      console.error('Backend connection check failed:', error);
    }
  }

  updateStatus(text, className = 'text-gray-400') {
    this.statusDiv.textContent = text;
    this.statusDiv.className = `text-sm ${className}`;
  }

  async sendMessage() {
    const message = this.chatInput.value.trim();
    if (!message) return;

    // Clear input and disable send button
    this.chatInput.value = '';
    this.sendButton.disabled = true;
    this.updateStatus('Thinking...', 'text-yellow-400');

    // Add user message to chat
    this.addMessage('user', message);

    try {
      // Send to backend API
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          session_id: this.sessionId,
          user_id: 'frontend_user'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      // Add bot response to chat
      this.addMessage('bot', data.response || 'No response received');
      this.updateStatus('Ready', 'text-green-400');

    } catch (error) {
      console.error('Chat error:', error);
      this.addMessage('bot', `Error: ${error.message}`, 'error');
      this.updateStatus('Error', 'text-red-400');
    } finally {
      this.sendButton.disabled = false;
      this.chatInput.focus();
    }
  }

  addMessage(sender, content, type = 'normal') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'}`;
    
    const bubble = document.createElement('div');
    bubble.className = `max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
      sender === 'user' 
        ? 'bg-blue-600 text-white' 
        : type === 'error'
        ? 'bg-red-600 text-white'
        : 'bg-gray-700 text-gray-100'
    }`;
    
    const avatar = sender === 'user' ? 'ðŸ‘¤' : 'ðŸ§ ';
    bubble.innerHTML = `
      <div class="flex items-start space-x-2">
        <span class="text-sm">${avatar}</span>
        <div class="flex-1">
          <div class="text-xs opacity-75 mb-1">${sender === 'user' ? 'You' : 'GremlinGPT'}</div>
          <div class="text-sm whitespace-pre-wrap">${this.escapeHtml(content)}</div>
        </div>
      </div>
    `;
    
    messageDiv.appendChild(bubble);
    this.chatMessages.appendChild(messageDiv);
    
    // Scroll to bottom
    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    
    // Store message
    this.messages.push({ sender, content, timestamp: new Date() });
  }

  clearChat() {
    this.chatMessages.innerHTML = `
      <div class="text-center text-gray-500 text-sm">
        Chat cleared. Start a new conversation below.
      </div>
    `;
    this.messages = [];
    this.sessionId = this.generateSessionId();
  }

  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}

// Initialize chat when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  window.gremlinChat = new GremlinChat();
});
</script>

<style>
#chat-messages::-webkit-scrollbar {
  width: 6px;
}

#chat-messages::-webkit-scrollbar-track {
  @apply bg-gray-800;
}

#chat-messages::-webkit-scrollbar-thumb {
  @apply bg-gray-600 rounded-full;
}

#chat-messages::-webkit-scrollbar-thumb:hover {
  @apply bg-gray-500;
}
</style>
